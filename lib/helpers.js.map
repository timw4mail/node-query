{"version":3,"sources":["helpers.js"],"names":[],"mappings":"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","file":"helpers.js","sourcesContent":["\"use strict\";\n\n//require('es6-shim');\n\nlet helpers = {\n\t/**\n\t * Wrap String.prototype.trim in a way that is easily mappable\n\t *\n\t * @param {String} str - The string to trim\n\t * @return {String} - The trimmed string\n\t */\n\tstringTrim: (str) => str.trim(),\n\t/**\n\t * Get the type of the variable passed\n\t *\n\t * @see https://techblog.badoo.com/blog/2013/11/01/type-checking-in-javascript/\n\t * @see http://toddmotto.com/understanding-javascript-types-and-reliable-type-checking/\n\t * @param {mixed} o\n\t * @return {String}\n\t */\n\ttype: (o) => {\n\t    let type = Object.prototype.toString.call(o).slice(8, -1).toLowerCase();\n\n\t    // handle NaN and Infinity\n\t    if (type === 'number') {\n\t        if (isNaN(o)) {\n\t            return 'nan';\n\t        }\n\t        if (!isFinite(o)) {\n\t            return 'infinity';\n\t        }\n\t    }\n\n\t    return type;\n\t},\n\t/**\n\t * Determine whether an object is scalar\n\t *\n\t * @param {mixed} obj\n\t * @return {bool}\n\t */\n\tisScalar: (obj) => {\n\t\tlet scalar = ['string', 'number', 'boolean'];\n\t\treturn scalar.indexOf(helpers.type(obj)) !== -1;\n\t},\n\t/**\n\t * Get a list of values with a common key from an array of objects\n\t *\n\t * @param {Array} arr - The array of objects to search\n\t * @param {String} key - The key of the object to get\n\t * @return {Array}\n\t */\n\tarrayPluck: (arr, key) => {\n\t\tlet output = [];\n\n\t\t// Empty case\n\t\tif (arr.length === 0) return output;\n\n\t\tarr.forEach((obj) => {\n\t\t\tif ( ! helpers.isUndefined(obj[key]))\n\t\t\t{\n\t\t\t\toutput.push(obj[key]);\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t},\n\t/**\n\t * Determine if a value matching the passed regular expression is\n\t * in the passed array\n\t *\n\t * @param {Array} arr - The array to search\n\t * @param {RegExp} pattern - The pattern to match\n\t * @return {Boolean} - If an array item matches the pattern\n\t */\n\tregexInArray: (arr, pattern) => {\n\t\t// Empty case(s)\n\t\tif ( ! helpers.isArray(arr)) return false;\n\t\tif (arr.length === 0) return false;\n\n\t\tlet i, l = arr.length;\n\n\t\tfor(i=0; i< l; i++)\n\t\t{\n\t\t\t// Short circuit if any items match\n\t\t\tif (pattern.test(arr[i])) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\t/**\n\t * Make the first letter of the string uppercase\n\t *\n\t * @param {String} str\n\t * @return {String}\n\t */\n\tupperCaseFirst: (str) => {\n\t\tstr += '';\n\t\tlet first = str.charAt(0).toUpperCase();\n\t\treturn first + str.substr(1);\n\t}\n};\n\n// Define an 'is' method for each type\nlet types = ['Null','Undefined','Object','Array','String','Number','Boolean','Function','RegExp','NaN','Infinite'];\ntypes.forEach((t) => {\n\t/**\n\t * Determine whether a variable is of the type specified in the\n\t * function name, eg isNumber\n\t *\n\t * Types available are Null, Undefined, Object, Array, String, Number, Boolean, Function, RegExp, NaN and Infinite\n\t *\n\t * @name is[type]\n\t * @param {mixed} o\n\t * @return {Boolean}\n\t */\n    helpers['is' + t] = function (o) {\n\t    if (t.toLowerCase() === 'infinite')\n\t    {\n\t\t    t = 'infinity';\n\t    }\n\n        return helpers.type(o) === t.toLowerCase();\n    };\n});\n\nmodule.exports = helpers;"],"sourceRoot":"/source/"}